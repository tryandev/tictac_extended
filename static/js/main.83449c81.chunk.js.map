{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","index.js"],"names":["Square","props","className","winning","onClick","value","Board","i","isWinningSquare","this","winSquares","indexOf","key","squares","rows","size","sizeClass","y","cols","x","push","renderSquare","row","React","Component","History","history","cursor","ret","map","historyMove","index","descrip","squareNum","Math","floor","piece","currentClass","onTimeTravel","reverse","Game","state","xIsNext","slice","calculateWinner","newHistory","concat","setState","e","target","checked","status","current","calc","winner","historyClass","length","type","min","max","onChange","changeBoardSize","handleClick","reverseTimeline","reversed","handleTimeTravel","wins","first","broken","xy","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83449c81.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={`square ${props.winning ? \"winning\" : \"\"}`} onClick={props.onClick} >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square","import React from 'react';\r\nimport Square from './Square'\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        let isWinningSquare = this.props.winSquares && this.props.winSquares.indexOf(i) > -1;\r\n        return (\r\n            <Square \r\n                key={i}\r\n                winning={isWinningSquare}\r\n                value={this.props.squares[i]} \r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        let size = this.props.size;\r\n        let sizeClass = size <= 3 ? \"small\" : \"\";\r\n        for (let y = 0; y < size; y++) {\r\n            let cols = [];\r\n            for (let x = 0; x < size; x++){\r\n                cols.push(this.renderSquare(y * size + x));\r\n            }\r\n            let row = <div key={y} className=\"board-row\">{cols}</div>;\r\n            rows.push(row);\r\n        }\r\n        return (\r\n            <div className={sizeClass}>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board","import React from 'react';\r\n\r\nfunction History(props) {\r\n    const history = props.history;\r\n    const cursor = props.cursor;\r\n    const ret = history.map((historyMove, index) => {\r\n        const moveName = index === 0 ? \"Game start\" : ''; //`Play #${index},`;\r\n        let descrip = `${moveName}`;\r\n        let x = historyMove.squareNum % props.size + 1;\r\n        let y = Math.floor(historyMove.squareNum / props.size) + 1;\r\n        if (index > 0) {\r\n            descrip = `${descrip} ${historyMove.piece} on [${x}, ${y}]`;\r\n        }\r\n        let isCurrent = cursor === index;\r\n        let currentClass = isCurrent ? \"current\" : \"\"\r\n        return (\r\n            <li key={index}>\r\n                <button className={currentClass} onClick={() => props.onTimeTravel(index)} key={index}>\r\n                    {descrip}\r\n                </button>\r\n            </li>\r\n        )\r\n    });\r\n    if (props.reverse) ret.reverse();\r\n    return ret;\r\n}\r\n\r\nexport default History","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './components/Board'\nimport History from './components/History'\nimport './index.css';\n\nclass Game extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: [],\n                piece: null,\n                squareNum: -1,\n            }],\n            xIsNext: true,\n            cursor: 0,\n            reverse: true,\n            size: 3,\n        }\n    }\n\n    handleClick(i) {\n        const history = this.state.history;\n        let cursor = this.state.cursor;\n        const current = history[cursor];\n        const squares = current.squares.slice();\n        const calc = calculateWinner(squares, this.state.size);\n        const winner = squares[calc[0]];\n        if (winner || squares[i]) {\n            return;\n        }\n        cursor++;\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        let newHistory = history.slice(0, cursor).concat([{\n            squares: squares,\n            piece: squares[i],\n            squareNum: i,\n        }]);\n        this.setState({\n            history: newHistory,\n            xIsNext: !this.state.xIsNext,\n            cursor: cursor,\n        });\n    } \n\n    changeBoardSize(e) {\n        this.setState({\n            size: e.target.value\n        });\n        return true;\n    }\n\n    reverseTimeline(e) {\n        this.setState({\n            reverse: e.target.checked\n        });\n    }\n\n    handleTimeTravel(i) {\n        this.setState({\n            xIsNext: (i % 2) === 0,\n            cursor: i,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const cursor = this.state.cursor;\n        const current = history[cursor];\n        const calc = calculateWinner(current.squares, this.state.size);\n        const winner = current.squares[calc[0]];\n\n        let historyClass = \"history\" + (Math.floor(history.length / 6) * 6);\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else if (cursor >= this.state.size * this.state.size) {\n            status = `Draw game`;\n        } else {\n            status = `Current play: ${this.state.xIsNext ? 'X' : 'O'}`;\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"boardSize\">\n                    <label>\n                        <span> Game board size: {this.state.size}x{this.state.size}</span>\n                       <input type=\"range\" min=\"2\" max=\"5\" className=\"slider\" value={this.state.size} onChange={(e) => this.changeBoardSize(e)} />\n                    </label>\n                </div>\n                <div className=\"game-board\">\n                    <Board \n                        size={this.state.size}\n                        winSquares={calc}\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                    <div className=\"status\">{status}</div>\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"reverse\">\n                        <label>\n                            <input type=\"checkbox\" checked={this.state.reverse} onChange={(e) => this.reverseTimeline(e)}/>\n                            Reverse timeline\n                        </label>\n                    </div>\n                    <ol reversed={this.state.reverse} className={historyClass}>\n                        <History \n                            size={this.state.size}\n                            reverse={this.state.reverse}\n                            cursor={cursor}\n                            history={history} \n                            onTimeTravel={(i) => this.handleTimeTravel(i)}\n                        />\n                    </ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares, size) {\n\n    let wins = [];\n\n    for (let y = 0; y < size; y++) {\n        let first = squares[y * size], broken = false;\n        if (!first) continue;\n        wins[0] = y * size;\n        for (let x = 1; x < size; x++) {\n            let i = y * size + x;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[x] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    for (let x = 0; x < size; x++) {\n        let first = squares[x], broken = false;;\n        if (!first) continue;\n        wins[0] = x;\n        for (let y = 1; y < size; y++) {\n            let i = y * size + x;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[y] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    let first = squares[0], broken = false;\n    if (first) {\n        wins[0] = 0;\n        for (let xy = 1; xy < size; xy++) {\n            let i = xy * size + xy;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[xy] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    first = squares[size *  (size - 1)];\n    if (first) {\n        broken = false;\n        wins[0] = size *  (size - 1);\n        for (let xy = 1; xy < size; xy++) {\n            let i = (size - xy - 1) * size + xy;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[xy] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    return [];\n}\n"],"sourceRoot":""}