{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","index.js"],"names":["Square","props","className","winning","onClick","value","Board","i","isWinningSquare","this","winSquares","indexOf","key","squares","rows","size","y","cols","x","push","renderSquare","row","sizeClass","React","Component","History","history","cursor","ret","map","historyMove","index","descrip","squareNum","Math","floor","piece","currentClass","onTimeTravel","reverse","Game","state","twice","slice","winner","calculateWinner","turns","xIsNext","newHistory","concat","setState","e","target","name","checked","status","current","calc","historyClass","length","gameEnd","newGameBtn","newGame","type","min","max","onChange","changeOptions","handleClick","reverseTimeline","reversed","handleTimeTravel","wins","first","broken","xy","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d2ffed58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={`square ${props.winning ? \"winning\" : \"\"}`} onClick={props.onClick} >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square","import React from 'react';\r\nimport Square from './Square'\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        let isWinningSquare = this.props.winSquares && this.props.winSquares.indexOf(i) > -1;\r\n        return (\r\n            <Square \r\n                key={i}\r\n                winning={isWinningSquare}\r\n                value={this.props.squares[i]} \r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        let size = this.props.size;\r\n        for (let y = 0; y < size; y++) {\r\n            let cols = [];\r\n            for (let x = 0; x < size; x++){\r\n                cols.push(this.renderSquare(y * size + x));\r\n            }\r\n            let row = <div key={y} className=\"board-row\">{cols}</div>;\r\n            rows.push(row);\r\n        }\r\n\r\n        let sizeClass = `size${size}`;\r\n        return (\r\n            <div className={sizeClass}>\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board","import React from 'react';\r\n\r\nfunction History(props) {\r\n    const history = props.history;\r\n    const cursor = props.cursor;\r\n    const ret = history.map((historyMove, index) => {\r\n        const moveName = index === 0 ? \"Game start\" : ''; //`Play #${index},`;\r\n        let descrip = `${moveName}`;\r\n        let x = historyMove.squareNum % props.size + 1;\r\n        let y = Math.floor(historyMove.squareNum / props.size) + 1;\r\n        if (index > 0) {\r\n            descrip = `${descrip} ${historyMove.piece} on [${x}, ${y}]`;\r\n        }\r\n        let isCurrent = cursor === index;\r\n        let currentClass = isCurrent ? \"current\" : \"\"\r\n        return (\r\n            <li key={index}>\r\n                <button className={currentClass} onClick={() => props.onTimeTravel(index)} key={index}>\r\n                    {descrip}\r\n                </button>\r\n            </li>\r\n        )\r\n    });\r\n    if (props.reverse) ret.reverse();\r\n    return ret;\r\n}\r\n\r\nexport default History","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './components/Board'\nimport History from './components/History'\nimport './index.css';\n\nclass Game extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: [],\n                piece: null,\n                squareNum: -1,\n            }],\n            reverse: true,\n            twice: true,\n            cursor: 0,\n            size: 4,\n        }\n    }\n\n    handleClick(i) {\n        const history = this.state.history;\n        let cursor = this.state.cursor;\n        const current = history[cursor];\n        const squares = current.squares.slice();\n        const calc = calculateWinner(squares, this.state.size);\n        const winner = squares[calc[0]];\n        const turns = this.state.twice ? 2 : 1;\n\n        if (winner || squares[i]) return;\n\n        const xIsNext = Math.floor(cursor / turns) % 2 === 0;\n        squares[i] = xIsNext ? 'X' : 'O';\n\n        cursor++;\n        let newHistory = history.slice(0, cursor).concat([{\n            squares: squares,\n            piece: squares[i],\n            squareNum: i,\n        }]);\n\n        this.setState({\n            history: newHistory,\n            cursor: cursor,\n        });\n    } \n\n    changeOptions(e) {\n        if (e.target.name === \"board-size\") this.setState({size: e.target.value});\n        if (e.target.name === \"two-turns\") this.setState({twice: e.target.checked});\n        return true;\n    }\n\n    reverseTimeline(e) {\n        this.setState({\n            reverse: e.target.checked\n        });\n    }\n\n    handleTimeTravel(i) {\n        this.setState({\n            cursor: i,\n        });\n    }\n\n    newGame(e) {\n        this.setState({\n            history: [{\n                squares: [],\n                piece: null,\n                squareNum: -1,\n            }],\n            cursor: 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const cursor = this.state.cursor;\n        const current = history[cursor];\n        const calc = calculateWinner(current.squares, this.state.size);\n        const winner = current.squares[calc[0]];\n\n        let historyClass = \"history\" + (Math.floor(history.length / 6) * 6);\n\n        let status;\n        let gameEnd = false;\n        if (winner) {\n            status = `Winner: ${winner}`;\n            gameEnd = true;\n        } else if (cursor >= this.state.size * this.state.size) {\n            status = `Draw game`;\n            gameEnd = true;\n        } else {\n            const turns = this.state.twice ? 2 : 1;\n            const xIsNext = Math.floor(cursor / turns) % 2 === 0;\n            status = `${xIsNext ? 'X' : 'O'}'s turn`;\n        }\n\n        let newGameBtn = null;\n        if (gameEnd) {\n            newGameBtn = (\n                <button onClick={(e) => this.newGame(e)}>\n                    NEW GAME\n                </button>\n            );\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-options\">\n                    <div className=\"board-size\">\n                        <label>\n                            <span>Board size: {this.state.size}x{this.state.size}</span>\n                        <input name=\"board-size\" type=\"range\" min=\"2\" max=\"5\" className=\"slider\" value={this.state.size} onChange={(e) => this.changeOptions(e)} />\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            <input name=\"two-turns\" type=\"checkbox\" checked={this.state.twice} onChange={(e) => this.changeOptions(e)} />\n                            Two turns\n                        </label>\n                    </div>\n                </div>\n                <div className=\"game-board\">\n                    <Board \n                        size={this.state.size}\n                        winSquares={calc}\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                    <div className=\"status\">\n                        <span>{status}</span>\n                        { newGameBtn }\n                    </div>\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"reverse\">\n                        <label>\n                            <input type=\"checkbox\" checked={this.state.reverse} onChange={(e) => this.reverseTimeline(e)}/>\n                            Reverse timeline\n                        </label>\n                    </div>\n                    <ol reversed={this.state.reverse} className={historyClass}>\n                        <History \n                            size={this.state.size}\n                            reverse={this.state.reverse}\n                            cursor={cursor}\n                            history={history} \n                            onTimeTravel={(i) => this.handleTimeTravel(i)}\n                        />\n                    </ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares, size) {\n\n    let wins = [];\n\n    for (let y = 0; y < size; y++) {\n        let first = squares[y * size], broken = false;\n        if (!first) continue;\n        wins[0] = y * size;\n        for (let x = 1; x < size; x++) {\n            let i = y * size + x;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[x] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    for (let x = 0; x < size; x++) {\n        let first = squares[x], broken = false;;\n        if (!first) continue;\n        wins[0] = x;\n        for (let y = 1; y < size; y++) {\n            let i = y * size + x;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[y] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    let first = squares[0], broken = false;\n    if (first) {\n        wins[0] = 0;\n        for (let xy = 1; xy < size; xy++) {\n            let i = xy * size + xy;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[xy] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    first = squares[size *  (size - 1)];\n    if (first) {\n        broken = false;\n        wins[0] = size *  (size - 1);\n        for (let xy = 1; xy < size; xy++) {\n            let i = (size - xy - 1) * size + xy;\n            broken = squares[i] !== first;\n            if (broken) break;\n            wins[xy] = i;\n        }\n        if (!broken) return wins;\n    }\n\n    return [];\n}\n"],"sourceRoot":""}